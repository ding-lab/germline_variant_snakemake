# Call germline variant

import os
import pandas

GENOME_FA = "/diskmnt/Datasets/Reference/human_genome/GRCh37-lite/GRCh37-lite.fa"
INTERVALPREFIX = "/diskmnt/Projects/Users/wliang/Germline_Noncoding/RegulatoryGermline/reference/interval_chr"
CHR=[str(i) for i in range (1,23)]
CHR.append("X")
CHR.append("Y")

### Get BAM path and sample id from input file

#def resolve_raw(wildcards):
#    with open (input_file) as f2:
#        info=



BAM = "/diskmnt/Datasets/TCGA/example_BAM/TCGA-73-4677-11A-01D-1203-02_IlluminaHiSeq-DNASeq_whole.bam"
SAMPLE = "TCGA-73-4677-11A-01D-1203-02"




### Run GATK HaplotypeCaller and Select Variant
rule gatk_haplotypecaller:
    input: 
        genome_fa = GENOME_FA,
        bam = BAM,
        interval = f"{INTERVALPREFIX}{{ix}}.list"
    output: temp("gatk.raw.chr{ix}.vcf")
    shell: "gatk HaplotypeCaller -R {input.genome_fa} -I {input.bam} -L {input.interval} -O {output} --standard-min-confidence-threshold-for-calling 30.0"

rule gatk_selectvariant_snp:
    input:
        genome_fa = GENOME_FA,
        input_vcf = "gatk.raw.chr{ix}.vcf"
    output: temp("gatk.snp.chr{ix}.vcf")
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type SNP -select-type MNP"

rule gatk_selectvariant_indel:
    input:
        genome_fa = GENOME_FA,
        input_vcf = "gatk.raw.chr{ix}.vcf"
    output: temp("gatk.indel.chr{ix}.vcf")
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type INDEL"

#def resolve_raw(wildcards):
#    df[sample == wildcards.ix]['path']

#rule test:
#    input: raw=resolve_raw
#    output: 'path_{ix}.out'

rule gatk_merge_snp_vcf:
    input: calls= expand('gatk.snp.chr{ix}.vcf', ix=CHR)
    output: "gatk.snp.vcf"
    wrapper: "0.26.0/bio/bcftools/concat"

rule gatk_merge_indel_vcf:
    input: calls= expand('gatk.indel.chr{ix}.vcf', ix=CHR)
    output: "gatk.indel.vcf"
    wrapper: "0.26.0/bio/bcftools/concat"

###Run Varscan
rule varscan_mpileup2snp:
    input:
         genome_fa = GENOME_FA,
         bam = BAM
    output:temp("varscan.snp.chr{ix}.vcf")
    params: chr="{ix}"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -r {params.chr} {input.bam} | varscan mpileup2snp - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output}"

rule varscan_mpileup2indel:
    input:
         genome_fa = GENOME_FA,
         bam = BAM
    output:temp("varscan.indel.chr{ix}.vcf")
    params: chr="{ix}"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -r {params.chr} {input.bam} | varscan mpileup2indel - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output}"

rule varscan_snp_index:
    input: "varscan.snp.chr{ix}.vcf"
    output: temp("varscan.snp.chr{ix}.vcf.gz")
    shell: "bcftools view {input} -Oz -o {output}; bcftools index {output}"

rule varscan_indel_index:
    input: "varscan.indel.chr{ix}.vcf"
    output: temp("varscan.indel.chr{ix}.vcf.gz")
    shell: "bcftools view {input} -Oz -o {output}; bcftools index {output}"

rule varscan_merge_snp_vcf:
    input: calls= expand('varscan.snp.chr{ix}.vcf.gz', ix=CHR)
    output: "varscan.snp.vcf"
    wrapper: "0.26.0/bio/bcftools/concat"

rule varscan_merge_indel_vcf:
    input: calls= expand('varscan.indel.chr{ix}.vcf.gz', ix=CHR)
    output: "varscan.indel.vcf"
    wrapper: "0.26.0/bio/bcftools/concat"


###Run Pindel

with open("pindel_config.txt", "w") as f:
    f.write (f"{BAM}	500	TCGA-73-4677-11A-01D-1203-02")

rule pindel_call:
    input:
        ref = GENOME_FA,
        samples = BAM,
        config = ancient("pindel_config.txt")
    output: "pindel/chr{ix}/pindel.out.chr{ix}.raw"
    params:
        prefix="pindel/chr{ix}/chr{ix}",
        extra="-x 4 -w 0.1 -B 0 -M 3 -J pindel-centromere-exclude.bed -c {ix}",
        chr="{ix}"
    threads: 4
    shell: "pindel {params.extra} -T {threads} -f {input.ref} -i {input.config} -o {params.prefix} ; cat pindel/chr{params.chr}/chr{params.chr}_D pindel/chr{params.chr}/chr{params.chr}_INV pindel/chr{params.chr}/chr{params.chr}_TD pindel/chr{params.chr}/chr{params.chr}_SI | grep ChrID > {output}"

#Generate the config file for pindel_filter.v0.5.pl
for ix in CHR:
    filename=f"pindel/chr{ix}/pindel.input.chr{ix}.37.txt"
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    with open(filename, "w") as f:
        f.write ( \
f"pindel.filter.pindel2vcf = /diskmnt/Projects/Users/wliang/miniconda3/envs/snakemake/bin/pindel2vcf\n\
pindel.filter.variants_file = pindel/chr{ix}/pindel.out.chr{ix}.raw\n\
pindel.filter.REF = /diskmnt/Datasets/Reference/human_genome/GRCh37-lite/GRCh37-lite.fa\n\
pindel.filter.date = 000000\n\
pindel.filter.heterozyg_min_var_allele_freq = 0.2\n\
pindel.filter.homozyg_min_var_allele_freq = 0.8\n\
pindel.filter.mode = germline\n\
pindel.filter.apply_filter = true\n\
pindel.filter.germline.min_coverages = 10\n\
pindel.filter.germline.min_var_allele_freq = 0.20\n\
pindel.filter.germline.require_balanced_reads = 'true'\n\
pindel.filter.germline.remove_complex_indels = 'true'\n\
pindel.filter.germline.max_num_homopolymer_repeat_units = 6")


rule filter_pindel:
    input: "pindel/chr{ix}/pindel.out.chr{ix}.raw"
    output: "pindel/chr{ix}/pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf"
    params: chr='{ix}'
    shell: "perl scripts/pindel_filter.v0.5.pl pindel/chr{params.chr}/pindel.input.chr{params.chr}.37.txt"

rule index_pindel:
    input: "pindel/chr{ix}/pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf"
    output: "pindel/chr{ix}/pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf.gz"
    params: chr='{ix}'
    shell: 'bcftools view {input} -Oz -o {output}; bcftools index {output}'

rule pindel_merge_vcf:
    input: calls=expand("pindel/chr{ix}/pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf.gz", ix=CHR)
    output: "pindel.vcf"
    wrapper: "0.27.0/bio/bcftools/concat"

rule all_tools:
    input: "gatk.snp.filtered.vcf", "gatk.indel.filtered.vcf", "varscan.snp.filtered.vcf", "varscan.indel.filtered.vcf", "pindel.vcf"

rule filter:
    input: "gatk.snp.vcf", "gatk.indel.vcf", "varscan.snp.vcf", "varscan.indel.vcf"
    output: "gatk.snp.filtered.vcf", "gatk.indel.filtered.vcf", "varscan.snp.filtered.vcf", "varscan.indel.filtered.vcf"
    shell: "perl scripts/filter_gatk_varscan.pl `pwd`"

#rule merge_vcf:
#    input: 
#        gsnp = "gatk.snp.filtered.vcf",
#        gindel = "gatk.indel.filtered.vcf",
#        vsnp = "varscan.snp.filtered.vcf", 
#        vindel = "varscan.indel.filtered.vcf",
#        pindel = "pindel.vcf",
#        genome_fa = GENOME_FA
#    output: "merged.vcf"
#    singularity: "docker://broadinstitute/gatk3:3.8-0"
#    shell: "java -Xms256m -Xmx512m -jar GenomeAnalysisTK.jar -T CombineVariants -R {input.genome_fa} -o {output} --variant:gsnp {input.gsnp} --variant:gindel {input.gindel} --variant:vsnp {input.vsnp} --variant:vindel {input.vindel} --variant:pindel {input.pindel} -genotypeMergeOptions PRIORITIZE -priority gsnp,vsnp,gindel,vindel,pindel"
    
   
