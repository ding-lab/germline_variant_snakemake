# Call germline variant

import os
import pandas as pd
from pathlib import Path
from snakemake.remote.GS import RemoteProvider as GSRemoteProvider
GS = GSRemoteProvider()

configfile: "/home/germline_variant_snakemake/google_api/config.yaml"

INTERVALPREFIX = config["interval_prefix"]
CHR=[str(i) for i in range (1,23)]
CHR.append("X")
CHR.append("Y")

### Get BAM path and sample id from config file

SAMPLE = pd.read_table(config["samples"]).iloc[0]["sample"]
BUCKET = pd.read_table(config["samples"]).iloc[0]["bucket"]
REF = pd.read_table(config["samples"]).iloc[0]["reference"]
BAM = pd.read_table(config["samples"]).iloc[0]["bampath"]
print(SAMPLE, BUCKET, REF, BAM, BAM.split("/")[-1])


### Run GATK HaplotypeCaller and Select Variant
rule gatk_haplotypecaller:
    input: 
        genome_fa = REF,
        bam = BAM,
        interval = f"{INTERVALPREFIX}{{ix}}.list"
    output: GS.remote(BUCKET + "/{sample}.gatk.raw.chr{ix}.vcf")
    log: "logs/{sample}.gatk.haplotypecaller.chr{ix}.log"
    shell: "gatk HaplotypeCaller -R {input.genome_fa} -I {input.bam} -L {input.interval} -O {output} --standard-min-confidence-threshold-for-calling 30.0 2>{log}"

rule gatk_selectvariant_snp:
    input:
        genome_fa = REF,
        input_vcf = GS.remote(BUCKET + "/{sample}.gatk.raw.chr{ix}.vcf")
    output: GS.remote(BUCKET + "/{sample}.gatk.snp.chr{ix}.vcf")
    log: "logs/{sample}.gatk.selectsnp.chr{ix}.log"
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type SNP -select-type MNP 2>{log}"

rule gatk_selectvariant_indel:
    input:
        genome_fa = REF,
        input_vcf = GS.remote(BUCKET + "/{sample}.gatk.raw.chr{ix}.vcf")
    output: GS.remote(BUCKET + "/{sample}.gatk.indel.chr{ix}.vcf")
    log: "logs/{sample}.gatk.selectindel.chr{ix}.log"
    shell: "gatk SelectVariants -R {input.genome_fa} -V {input.input_vcf} -O {output} -select-type INDEL 2>{log}"

rule gatk_merge_snp_vcf:
    input: GS.remote(expand(BUCKET+'/{{sample}}.gatk.snp.chr{ix}.vcf', ix=CHR))
    output: "{sample}.gatk.snp.vcf"
    shell: "bcftools concat -o {output} {input}"

rule gatk_merge_indel_vcf:
    input: GS.remote(expand(BUCKET+'/{{sample}}.gatk.indel.chr{ix}.vcf', ix=CHR))
    output: "{sample}.gatk.indel.vcf"
    shell: "bcftools concat -o {output} {input}"

###Run Varscan
rule varscan_mpileup2snp:
    input:
         genome_fa = REF,
         bam = BAM
    output: GS.remote(BUCKET+"/{sample}.varscan.snp.chr{ix}.vcf")
    params: chr="{ix}"
    log: "logs/{sample}.varscan.snp.chr{ix}.log"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -r {params.chr} {input.bam} | varscan mpileup2snp - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output} 2>{log}"

rule varscan_mpileup2indel:
    input:
         genome_fa = REF,
         bam = BAM
    output: GS.remote(BUCKET+"/{sample}.varscan.indel.chr{ix}.vcf")
    params: chr="{ix}"
    log: "logs/{sample}.varscan.snp.chr{ix}.log"
    shell: "samtools mpileup -q 1 -Q 13 -f {input.genome_fa} -r {params.chr} {input.bam} | varscan mpileup2indel - --min-coverage 3 --min-var-freq 0.10 --p-value 0.10 --strand-filter 1 --output-vcf 1 > {output} 2>{log}"

rule varscan_snp_index:
    input: GS.remote(BUCKET+"/{sample}.varscan.snp.chr{ix}.vcf")
    output: "{sample}.varscan.snp.chr{ix}.vcf.gz"
    shell: "bcftools view {input} -Oz -o {output}; bcftools index {output}"

rule varscan_indel_index:
    input: GS.remote(BUCKET+"/{sample}.varscan.indel.chr{ix}.vcf")
    output: "{sample}.varscan.indel.chr{ix}.vcf.gz"
    shell: "bcftools view {input} -Oz -o {output}; bcftools index {output}"

rule varscan_merge_snp_vcf:
    input: expand('{{sample}}.varscan.snp.chr{ix}.vcf.gz', ix=CHR)
    output: "{sample}.varscan.snp.vcf"
    shell: "bcftools concat -o {output} {input}"

rule varscan_merge_indel_vcf:
    input: expand('{{sample}}.varscan.indel.chr{ix}.vcf.gz', ix=CHR)
    output: "{sample}.varscan.indel.vcf"
    shell: "bcftools concat -o {output} {input}"

###Run Pindel
rule pindel_config:
    output: GS.remote(BUCKET+"/"+SAMPLE+".pindel_config.txt")
    run:
        filename= BUCKET+"/"+SAMPLE+".pindel_config..txt"
        with open(filename, "w") as f1:
            f1.write(BAM.split("/")[-1], "500", SAMPLE)

rule pindel_call:
    input:
        ref = REF,
        samples = BAM,
        config = GS.remote(BUCKET+"/"+SAMPLE+".pindel_config.txt")
    output: GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw")
    params:
        prefix= BUCKET+"/pindel/chr{ix}/{sample}.chr{ix}",
        extra="-x 4 -w 0.1 -B 0 -M 3 -J /home/germline_variant_snakemake/files/pindel-centromere-exclude.bed -c {ix}",
        chr="{ix}",
        sample="{sample}",
    log: "logs/{sample}.pindel.chr{ix}.log"
    threads: 4
    shell: "pindel {params.extra} -T {threads} -f {input.ref} -i {input.config} -o {params.prefix} -L {log}; cat {params.prefix}_D {params.prefix}_INV {params.prefix}_TD {params.prefix}_SI | grep ChrID > {output}"

#Generate the config file for pindel_filter.v0.5.pl

rule pindel_filter_config:
    input: GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw")
    output: 
        GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.input.chr{ix}.txt")
    params: 
        sample="{sample}",
        chr="{ix}",
        ref_file = REF,
        path2pindel2vcf = config["path_to_pindel2vcf"],
        bucket = BUCKET
    run:
        for ix in CHR:
            filename= BUCKET+"/pindel/chr{params.chr}/{params.sample}.pindel.input.chr{params.chr}.txt"
            with open(filename, "w") as f:
                f.write ( \
f"pindel.filter.pindel2vcf = {params.path2pindel2vcf}\n\
pindel.filter.variants_file = /mnt/data/input/{params.bucket}/pindel/chr{params.chr}/{params.sample}.pindel.out.chr{params.chr}.raw\n\
pindel.filter.REF = /mnt/data/input/{params.ref_file}\n\
pindel.filter.date = 000000\n\
pindel.filter.heterozyg_min_var_allele_freq = 0.2\n\
pindel.filter.homozyg_min_var_allele_freq = 0.8\n\
pindel.filter.mode = germline\n\
pindel.filter.apply_filter = true\n\
pindel.filter.germline.min_coverages = 10\n\
pindel.filter.germline.min_var_allele_freq = 0.20\n\
pindel.filter.germline.require_balanced_reads = 'true'\n\
pindel.filter.germline.remove_complex_indels = 'true'\n\
pindel.filter.germline.max_num_homopolymer_repeat_units = 6")

rule filter_pindel:
    input: 
        config_file=GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.input.chr{ix}.txt"),
        raw=GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw")
    output: GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf")
    params: 
        chr='{ix}',
        sample='{sample}'
    shell: "perl /home/germline_variant_snakemake/scripts/pindel_filter.v0.5.pl {input.config_file}"

rule index_pindel:
    input: GS.remote(BUCKET+"/pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf")
    output: "pindel/chr{ix}/{sample}.pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf.gz"
    shell: 'bcftools view {input} -Oz -o {output}; bcftools index {output}'

rule pindel_merge_vcf:
    input: expand("pindel/chr{ix}/{{sample}}.pindel.out.chr{ix}.raw.CvgVafStrand_pass.Homopolymer_pass.vcf.gz", ix=CHR)
    output: "{sample}.pindel.vcf"
    shell: "bcftools concat -o {output} {input}"

rule all_tools:
    input: 
        expand("{sample}.gatk.snp.filtered.vcf", sample=SAMPLE),
        expand("{sample}.gatk.indel.filtered.vcf", sample=SAMPLE),
        expand("{sample}.varscan.snp.filtered.vcf", sample=SAMPLE),
        expand("{sample}.varscan.indel.filtered.vcf", sample=SAMPLE),
        expand("{sample}.pindel.vcf", sample=SAMPLE)

rule filter:
    input: "{sample}.gatk.snp.vcf", "{sample}.gatk.indel.vcf", "{sample}.varscan.snp.vcf", "{sample}.varscan.indel.vcf", "{sample}.pindel.vcf"
    output: "{sample}.gatk.snp.filtered.vcf", "{sample}.gatk.indel.filtered.vcf", "{sample}.varscan.snp.filtered.vcf", "{sample}.varscan.indel.filtered.vcf"
    params: sample = '{sample}'
    shell: "perl /home/germline_variant_snakemake/scripts/filter_gatk_varscan.pl `pwd` {params.sample}"
